package main

/*
	Hash 表常见操作的时间复杂度是多少？遇到 Hash 冲突是如何解决的？

	个人看法：
	Hash表一般是由数组+链表来实现的（也可以是数组和平衡二叉查找树）。先说查找操作，数组在内存中是一块连续的空间，只要知道查找数据的下标（值经过哈希算法所得结果），就可
	以直接定位到数据的内存地址，所以哈希定位的时间复杂度为O(1)。接下来再说哈希碰撞的问题，考虑到当发生hash冲突的时候，两个不同的值，经过哈希算法算得的结果是一样的
	话，那么就会放置到同一个哈希桶内部，目前可以采取的方法是链表法，当然还有把链表替换为平衡二叉树的情况。如果是链表法的话，那么查找操作的时间复杂度就是O(n)，如果是
	平衡二叉查找树的话，那么查询的时间复杂度就是O(logn)。当然还可以是红黑树的结构等等。再来说插入操作，对于链表来说，插入操作的时间复杂度是O(1)，但是如果涉及到了链表
	排序插入的话，而不是直接插在队尾，那么时间复杂度就是O(n)；对于平衡二叉查找树来说，插入操作还是比较稳定的，为O(logn)。

	目前遇到哈希冲突有开放寻址法和链表法。开放寻址法就是当发生哈希冲突的时候，就把该值放入到该哈希桶下一个为空的位置上面去；链表法就是每个哈希桶对应了一个链表，里面放置
	这个哈希值所对应的所有值信息

*/
